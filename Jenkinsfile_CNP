#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder

properties([
  [
    $class       : 'GithubProjectProperty',
    displayName  : 'HRS Ingestor Service',
    projectUrlStr: 'https://github.com/hmcts/em-hrs-ingestor'
  ],
  pipelineTriggers([
    [$class: 'GitHubPushTrigger']
  ])
])

@Library("Infrastructure")


def type = "java"
def product = "em"
def component = "hrs-ingestor"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN')
  ],
  'rpa-${env}': [
    secret('show-oauth2-token', 'FUNCTIONAL_TEST_CLIENT_OAUTH_SECRET')
  ],
  'em-hrs-api-${env}': [
    secret('cvp-storage-connection-string', 'AAT_CVP_STORAGE_CONNECTION_STRING'),
    secret('storage-account-primary-connection-string', 'AAT_HRS_STORAGEACCOUNT_CONNECTION_STRING'),
    secret('cvp-storage-container-name', 'AAT_CVP_STORAGE_CONTAINER_NAME'),
    secret('hrs-storage-container-name', 'AAT_HRS_STORAGE_CONTAINER_NAME')
  ]
]


GradleBuilder builder = new GradleBuilder(this, product)


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars for Kubernetes
env.IDAM_API_BASE_URI = 'https://idam-api.aat.platform.hmcts.net'
env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
env.OIDC_ISSUER_BASE_URI = 'https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts'
env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
env.IDAM_WEBSHOW_WHITELIST = 'https://em-show-aat.service.core-compute-aat.internal/oauth2/callback'

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

withPipeline(type, product, component) {

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  afterSuccess('test') {
    builder.gradle('integration')
  }
  enableAksStagingDeployment()
  disableLegacyDeployment()
  nonServiceApp()
  onMaster {
    afterSuccess('test') {
      sh '''
            curl https://raw.githubusercontent.com/hmcts/reform-api-docs/master/bin/publish-swagger-docs.sh > publish-swagger-docs.sh
            sh ./publish-swagger-docs.sh
             '''

    }
  }

  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  afterAlways('akschartsinstall') {

    echo "Overriding vault environment"
    overrideVaultEnvironments(vaultOverrides)
    echo "Loading the secrets again"
    loadVaultSecrets(secrets)

    // To run functional tests
    env.IDAM_API_BASE_URI = 'https://idam-api.aat.platform.hmcts.net'
    env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
    env.OIDC_ISSUER_BASE_URI = 'https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts'
    env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.IDAM_WEBSHOW_WHITELIST = 'https://em-show-aat.service.core-compute-aat.internal/oauth2/callback'


    echo "Just waiting a while to ensure that the pod has run the job"
    sh "sleep 120s"
    echo "Verifying that functional test data was processed correctly"
    try {
      echo "Bypassing functionalPostDeploy as Jenkins does not have ingestor MI"
//      builder.gradle('functionalPostDeploy')
    } finally {
      echo "Running Junit against results"
      //junit '**/test-results/**/*.xml'
    }
  }

  syncBranchesWithMaster(['demo', 'perftest', 'ithc'])
}
