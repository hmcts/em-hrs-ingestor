buildscript {
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.13")
    classpath("net.serenity-bdd:serenity-single-page-report:2.4.51")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.3.4.RELEASE'
  id 'com.github.ben-manes.versions' version '0.36.0'// NOTE version 0.38 is suspected to be the cause of
                                                     // the intermittant failure with module metadata. TO BE CONFIRMED!!
  id 'org.sonarqube' version '3.2.0'
  id 'uk.gov.hmcts.java' version '0.12.9'
  id 'au.com.dius.pact' version '4.2.11'
  id "info.solidsoft.pitest" version '1.6.0'
}

group = 'uk.gov.hmcts.reform.em.hrs'
version = '0.0.1'
apply plugin: 'net.serenity-bdd.aggregator'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

/***********************************************************************************************************************
 * Source Sets
 **********************************************************************************************************************/

sourceSets {

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

/***********************************************************************************************************************
 * Compile & Test Task Configuration
 **********************************************************************************************************************/

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  useJUnitPlatform()
}

task functional(type: Test) {
  // This task is required for a Jenkins hook (fullFunctionalTest)
  logger.info('This task is required for a Jenkins hook (fullFunctionalTest)')
}



task functionalPostDeploy(type: Test) {
  group = 'Functional Tests'
  description = 'Verifies that files from functionPreDeploy step were processed following job creation in AKS'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  include "uk/gov/hmcts/reform/em/hrs/ingestor/functional/**"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

// Serenity Reporting
functional.finalizedBy(aggregate)

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  group = 'Delivery pipeline'
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
//TODO do we need to sepcify paths if tags are used? include "uk/gov/hmcts/reform/em/hrs/ingestor/smoke/**"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
  failFast = true
}

/***********************************************************************************************************************
 * Code Checks
 **********************************************************************************************************************/

checkstyle {
  maxWarnings = 10
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.30.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/hrs/ingestor/Application*',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/listener/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/config/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/model/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/exception/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/appinsights/*',
]

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    }))
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: em-hrs-ingestor"
    property "sonar.projectKey", "uk.gov.hmcts.reform.em.hrs:em-hrs-ingestor"
    property "sonar.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

/***********************************************************************************************************************
 * Dependency Management
 **********************************************************************************************************************/

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {

    dependencySet(group: 'com.google.guava', version: '30.1.1-jre') {
      // Guava CVE-2018-10237 - Unbounded memory allocation
      entry 'guava'
    }

    //CVE-2020-15824, CVE-2020-29582
    dependencySet(group: 'org.jetbrains.kotlin', version: '1.5.0-M1') {
      entry 'kotlin'
      entry 'kotlin-stdlib'
      entry 'kotlin-reflect'
      entry 'kotlin-stdlib-common'
      entry 'kotlin-stdlib-jdk7'
      entry 'kotlin-stdlib-jdk8'
    }

    // CVE-2021-37136, CVE-2021-37137
    dependencySet(group: 'io.netty', version: '4.1.70.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-resolver'
      entry 'netty-transport'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-kqueue'
      entry 'netty-transport-native-unix-common'
      entry 'netty-codec-socks'
      entry 'netty-handler-proxy'
    }

    //CVE-2021-22112
    dependencySet(group: 'org.springframework.security', version: '5.3.8.RELEASE') {
      entry 'spring-security-config'
      entry 'spring-security-core'
      entry 'spring-security-crypto'
      entry 'spring-security-oauth2-client'
      entry 'spring-security-oauth2-core'
      entry 'spring-security-oauth2-jose'
      entry 'spring-security-oauth2-resource-server'
      entry 'spring-security-web'
    }

    //CVE-2021-29425
    dependencySet(group: 'commons-io', version: '2.11.0') {
      entry 'commons-io'
    }


    //CVE-2021-22118, CVE-2021-22096
    dependencySet(group: 'org.springframework', version: '5.3.12') {
      entry 'spring-aop'
      entry 'spring-aspects'
      entry 'spring-beans'
      entry 'spring-context'
      entry 'spring-context-support'
      entry 'spring-core'
      entry 'spring-expression'
      entry 'spring-jcl'
      entry 'spring-jdbc'
      entry 'spring-orm'
      entry 'spring-tx'
      entry 'spring-web'
      entry 'spring-webmvc'
    }

    //CVE-2021-27568
    dependencySet(group: 'net.minidev', version: '2.4.7') {
      entry 'json-smart'
    }

    //CVE-2021-42340
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.54') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-websocket'
    }

    //CVE-2021-28170
    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

  }
}

repositories {
  mavenCentral()
  jcenter()
  maven { url 'https://jitpack.io' }
}

def versions = [
  junit              : '5.7.1',
  junitPlatform      : '1.8.1',
  reformLogging      : '5.1.7',
  log4JVersion       : "2.17.0",
  springBoot         : springBoot.class.package.implementationVersion,
  springfoxSwagger   : '2.9.2',
  pact_version       : '3.6.15',
  restAssured        : '4.2.0',
  serenity           : '2.3.13',
  serenityRestAssured: '2.3.4',
  serenityreporter   : '2.3.13',
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]


def withoutStuff = {
  exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
  exclude group: 'com.vaadin.external.google', module: 'android-json'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-test'
  exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
}

dependencies {
  annotationProcessor 'org.projectlombok:lombok:1.18.20'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: "uk.gov.hmcts.reform", name: "service-auth-provider-client", version: "3.1.4"

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging

  //CVE-2020-13956
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

  implementation group: 'com.opencsv', name: 'opencsv', version: '5.5.2'

  implementation 'org.projectlombok:lombok:1.18.18'
  implementation "ch.qos.logback:logback-classic:1.2.5"
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4JVersion

  //azure components
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.10.2'
  implementation group: 'com.azure', name: 'azure-identity', version: '1.2.3'


  //rest clients
  implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.1'
  implementation group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '4.9.1'
  implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
  implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.9.0'

  implementation group: 'net.sf.jsignature.io-tools', name: 'easystream', version: '1.2.15'

  //test implementation
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
  testImplementation 'org.projectlombok:lombok:1.18.18'



  testImplementation group: 'com.github.gmazzo', name: 'okhttp-mock', version: '1.4.1'

  testImplementation libraries.junit5

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.19.0'
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.15.2'
  testImplementation group: 'com.devskiller', name: 'jfairy', version: '0.6.4', {
    exclude group: 'com.google.guava', module: 'guava'
  }
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.31.0'
  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.3'
  testImplementation group :'info.solidsoft.gradle.pitest', name : 'gradle-pitest-plugin',version: '1.6.0'
  testImplementation group: 'org.pitest', name: 'pitest', version: '1.7.0'
  testImplementation group:'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: '0.5'

  functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  //smokeTest implementation

  //TODO TBD remove logback-classic
  //smokeTestImplementation "ch.qos.logback:logback-classic:1.2.3"

  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  contractTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-provider-junit5', version: '4.0.10'
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-provider-gradle', version: '4.0.10'

  contractTestImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  contractTestImplementation "org.junit.vintage:junit-vintage-engine:5.8.2"
  contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.2'

  /*contractTestCompileOnly 'org.projectlombok:lombok:1.18.12'
  contractTestImplementation "ch.qos.logback:logback-classic:1.2.3"*/

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  functionalTestImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  functionalTestImplementation "org.junit.vintage:junit-vintage-engine:5.6.2"
  functionalTestImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.2.0'
  functionalTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")

/***********************************************************************************************************************
 * TEST SOURCE SETS
 **********************************************************************************************************************/

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

/***********************************************************************************************************************
 * Adhoc
 **********************************************************************************************************************/

mainClassName = 'uk.gov.hmcts.reform.em.hrs.ingestor.Application'

bootJar {
  getArchiveFileName().set(provider {
    'em-hrs-ingestor.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

task contract(type: Test) {
  group = 'Delivery pipeline'
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/em/hrs/consumer/**"
  systemProperty 'pact.rootDir', "pacts"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runAndPublishConsumerPactTests(type: Test){
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

serenity {
  reports = ["single-page-html"]
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    version = project.pactVersion
  }
}

compileJava.dependsOn processResources

pitest {
  targetClasses = ['uk.gov.hmcts.reform.em.hrs.ingestor.*']
  targetTests = ['uk.gov.hmcts.reform.em.hrs.ingestor.*']
  //excludedClasses = ['uk.gov.hmcts.reform.em.hrs.service.SecurityServiceImplTest']
  //targetClasses = ['uk.gov.hmcts.reform.em.hrs.util.*']
  //targetTests = ['uk.gov.hmcts.reform.em.hrs.util.*']
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  threads = 15
  testSourceSets = [sourceSets.test, sourceSets.integrationTest]
  mainSourceSets = [sourceSets.main]
  fileExtensionsToFilter.addAll('xml', 'json')
  outputFormats = ['XML', 'HTML', 'CSV']
  mutationThreshold = 0
  coverageThreshold = 0
  maxMutationsPerClass = 15
  jvmArgs = ['-Xms1G', '-Xmx3G']
  timestampedReports = false
  failWhenNoMutations = false
  detectInlinedCode = true
}


