

plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.6'
  id 'com.github.ben-manes.versions' version '0.53.0'// NOTE version 0.38 is suspected to be the cause of
                                                     // the intermittant failure with module metadata. TO BE CONFIRMED!!
  id 'org.sonarqube' version '6.3.1.5724'
  id 'uk.gov.hmcts.java' version '0.12.67'
  id 'info.solidsoft.pitest' version '1.19.0-rc.2'
  id 'org.owasp.dependencycheck' version '12.1.6'
}

group = 'uk.gov.hmcts.reform.em.hrs'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}
/***********************************************************************************************************************
 * Source Sets
 **********************************************************************************************************************/

sourceSets {

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

/***********************************************************************************************************************
 * Compile & Test Task Configuration
 **********************************************************************************************************************/

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  useJUnitPlatform()
}

tasks.register('functional', Test) {
  // This task is required for a Jenkins hook (fullFunctionalTest)
  logger.info('This task is required for a Jenkins hook (fullFunctionalTest)')
}


tasks.register('functionalPostDeploy', Test) {
  group = 'Functional Tests'
  description = 'Verifies that files from functionPreDeploy step were processed following job creation in AKS'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  include "uk/gov/hmcts/reform/em/hrs/ingestor/functional/**"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  group = 'Delivery pipeline'
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
//TODO do we need to sepcify paths if tags are used? include "uk/gov/hmcts/reform/em/hrs/ingestor/smoke/**"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
  failFast = true
}

/***********************************************************************************************************************
 * Code Checks
 **********************************************************************************************************************/

checkstyle {
  maxWarnings = 0
  toolVersion = '11.1.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/hrs/ingestor/Application*',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/listener/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/config/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/model/**',
  '**uk/gov/hmcts/reform/em/hrs/ingestor/exception/**',
]

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    }))
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: em-hrs-ingestor"
    property "sonar.projectKey", "uk.gov.hmcts.reform.em.hrs:em-hrs-ingestor"
    property "sonar.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

/***********************************************************************************************************************
 * Dependency Management
 **********************************************************************************************************************/

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

configurations.configureEach {
  exclude group: 'org.apache.groovy', module: 'groovy-xml'
}

dependencyManagement {
  dependencies {
  }
}

def versions = [
  junit              : '6.0.0',
  junitPlatform      : '6.0.0',
  reformLogging      : '6.1.9',
  log4JVersion       : "2.25.2",
  okhttp3            : '5.2.1'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  annotationProcessor 'org.projectlombok:lombok:1.18.42'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.3.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.7.5'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.2'

  implementation 'org.projectlombok:lombok:1.18.42'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4JVersion

  //azure components
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.31.3'
  implementation group: 'com.azure', name: 'azure-identity', version: '1.18.0'

  //rest clients
  implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp3
  implementation group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: versions.okhttp3
  implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '3.0.0'
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '3.0.0'

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.19.0'

  //test implementation
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.42'
  testImplementation 'org.projectlombok:lombok:1.18.42'

  testImplementation group: 'com.github.gmazzo.okhttp.mock', name: 'mock-client', version: '2.1.0'

  testImplementation libraries.junit5

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.6'
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.21.3'
  testImplementation group: 'org.wiremock', name: 'wiremock-standalone', version: '3.13.1'

  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.3.0'
  testImplementation group :'info.solidsoft.gradle.pitest', name : 'gradle-pitest-plugin',version: '1.6.0'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.6'

/***********************************************************************************************************************
 * TEST SOURCE SETS
 **********************************************************************************************************************/

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

/***********************************************************************************************************************
 * Adhoc
 **********************************************************************************************************************/

application {
  mainClass = 'uk.gov.hmcts.reform.em.hrs.ingestor.Application'
}

bootJar {
  getArchiveFileName().set(provider {
    'em-hrs-ingestor.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

tasks.register('fortifyScan', JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}


compileJava.dependsOn processResources

pitest {
  targetClasses = ['uk.gov.hmcts.reform.em.hrs.ingestor.*']
  targetTests = ['uk.gov.hmcts.reform.em.hrs.ingestor.*']
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  threads = 15
  testSourceSets = [sourceSets.test, sourceSets.integrationTest]
  mainSourceSets = [sourceSets.main]
  fileExtensionsToFilter.addAll('xml', 'json')
  outputFormats = ['XML', 'HTML', 'CSV']
  pitestVersion = '1.17.2'
  mutationThreshold = 0
  coverageThreshold = 0
  jvmArgs = ['-Xms1G', '-Xmx3G']
  timestampedReports = false
  failWhenNoMutations = false
  detectInlinedCode = true
}


